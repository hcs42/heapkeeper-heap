Author: Csaba Hoch
Subject: Hard to test pieces of the code
Tag: discussion
Tag: reviewed
Message-Id: <4AC70430.2000201@gmail.com>
Parent: <20091002134643.7fc712b2.nagy.attila.1984@gmail.com>
Date: Sat, 03 Oct 2009 09:58:40 +0200

First you say "yes", then you explain why "not" :)

Maybe you misunderstood me: I meant that both the test suite and the
documentation covers all source code.

There is of course code that is hard to test, but if we customize them
the right way, they can be tested locally. (I don't want any test to
require network.)

Let's take your example. The current EmailDownloader class has these methods:

    def __init__(self, postdb, config):
        """Constructor.

        Arguments:
        postdb: Initialises self._postdb.
        config: Initialises self._config.
        """

        super(EmailDownloader, self).__init__()
        self._postdb = postdb
        self._config = config
        self._server = None

    def connect(self):
        """Connects to the IMAP server."""

        log('Reading settings...')
        host = self._config.get('server', 'host')
        port = int(self._config.get('server', 'port'))
        username = self._config.get('server', 'username')
        password = self._config.get('server', 'password')
        log('Connecting...')
        self._server = IMAP4_SSL(host, port)
        self._server.login(username, password)
        log('Connected')

If we customized it so that the caller can specify what object to use
instead of the IMAP4_SSL class, we could test it locally, without any
real IMAP server:

    -def __init__(self, postdb, config):
    +def __init__(self, postdb, config, imap_server_creator=IMAP4_SSL):
         """Constructor.

         Arguments:
         postdb: Initialises self._postdb.
         config: Initialises self._config.
         """

         super(EmailDownloader, self).__init__()
         self._postdb = postdb
         self._config = config
         self._server = None
    +    self._imap_server_creator = imap_server

     def connect(self):
         """Connects to the IMAP server."""

         log('Reading settings...')
         host = self._config.get('server', 'host')
         port = int(self._config.get('server', 'port'))
         username = self._config.get('server', 'username')
         password = self._config.get('server', 'password')
         log('Connecting...')
    -    self._server = IMAP4_SSL(host, port)
    +    self._server = self._imap_server_creator(host, port)
         self._server.login(username, password)
         log('Connected')

In the test, we would create an own IMAP server stub that of course
would be only capable of doing some assertions and returning some
hardcoded answers. For example the "connect" method of EmailDownloader
can be tested this way:

    class MyImapServer():
        def login(username, password):
            self.assertEquals(host, 'myusername')
            self.assertEquals(port, 'mypassword')

    def my_imap_server_creator(host, port):
        self.assertEquals(host, 'mytesthost')
        self.assertEquals(port, '1234')
        return MyImapServer()

    # we set up a ConfigParser variable so that it contains the
    # following attributes:
    #     server.host -> 'myhost'
    #     server.post -> '1234'
    #     server.username -> 'myusername'
    #     server.password -> 'mypassword'
    config = ...

    ed = EmailDownloader(postdb,
                         config,
                         imap_server_creator=my_imap_server_creator)
    ed.connect()

If you examine the `connect` method and the test case, we test each
single line of `connect` (except for the logging). If you mess up
anything (forget to convert the port to an integer, you write
`self._config.get('username')` instead of `self._config.get('server',
'username')`) -- the test case will fail.

The test case will pass though if the `connect` method does nothing.
If we are very cautious, I'll show a method later in my email about
testing that the `login` and other methods get called.

If we get more serious, we can handle the case in
EmailDownloader.connect when the connection fails; and of course we
can test that case as well.

We could do very similar tests for other methods. If we want to test
the `download_new` method, we have to write a MyImapServer.search and
MyImapServer.fetch methods that actually return something. But it is
not that hard to write methods that return something beside doing
assertions :)

The tricky thing is when you want to test that something has happened.
So for example you call EmailDownloader.close, and you want to test
that MyImapServer.close happened. How do you do that? You set a
variable to 0, and write MyImapServer.close so that it increases that
variable. After calling EmailDownloader.close, you examine that the
variable is indeed 1:

    # We use a list because it would be harder to modify it from
    # MyImapServer if we used an integer.
    close_called = [0]

    class MyImapServer:
        ...
        def close(self):
            close_called[0] += 1

    ...

    self.assertEquals(close_called, [0])
    ed.close()
    self.assertEquals(close_called, [1])

We can even test this way that the appropriate logs will be shown.
This is from test_hklib.py. It tests that if we parse a head with a
'Nosuchattr' attribute, we will get a warning about it through
hklib.log.

    def test_create_header(self):

        """Tests Post.create_header."""

        # Used only because otherwise we could not refer to hklib.log_fun
        import hklib

        # We use a custom log function
        old_log_fun = hklib.log_fun
        def log_fun(*args):
            log.append(''.join(args))
        set_log(log_fun)

        # Testing a normal post.
        #
        # The 'Nosuchattr' attribute is not known to `create_header`, so we
        # should get a warning.
        log = []
        self.assertEquals(
            Post.create_header(
                {'Author': ['someone'],
                 'Nosuchattr': ['1', '2']}),
            {'Author': 'someone',
             'Parent': '',
             'Flag': [],
             'Tag': [],
             'Date': '',
             'Message-Id': '',
             'Subject': '',
             'Reference': [],
             'Nosuchattr': ['1', '2']})
        self.assertEquals(
            log,
            ['''WARNING: Additional keys: "{'Nosuchattr': ['1', '2']}".'''])

        ... other test, not important now...

        # Setting the original logging function back
        hklib.set_log(old_log_fun)

The main things to remember: You want to simulate part of the
environment of the object you want to test. In a very simple case,
when you test a function, the environment is just the input
parameters; but usually it is more complicated than that. If the test
cannot use some part of the normal environment (e.g. the real IMAP
facilities), simulate it. You can use customization to get the object
to use your simulated environment-part instead of the usual one. (It
would be much harder if we could not modify the code under test, we
are lucky to test our own programs.)
