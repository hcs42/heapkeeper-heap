Author: Csaba Hoch
Subject: More hkweb on the web page
Tag: issue
Tag: reviewed
Message-Id: <AANLkTik2uMbBk1Nm=tXt6+nVNXGKa19=2RXYb0uxM4GD@mail.gmail.com>
Date: Sun, 25 Jul 2010 10:47:27 +0200

Most text on the main index page and the Status page of Heapkeeper's
home page was written before hkweb was usable. Now hkweb is in a much
better shape and should be advertised over the static HTML page
generation.

So I propose the following modification to the text in the main index
page and in the Status page.

doc/index-main.rst:

    -Emails (that are e.g. sent to a mailing list) are downloaded by
    -Heapkeeper. After an email is downloaded, it is called a *post*. Posts are
    -stored in Heapkeeper's database, which is called *the heap*. The heap is
    -stored in a set of text files; each file contains one post. Posts can be
    -changed either from Heapkeeper's console interface or by
    -directly modifying the text files in which the posts are stored. Posts are
    -organized in threads, as emails in mailing list archives usually are. Posts may
    -have tags as well. When modifying the heap, the content of the posts can be
    -modified, threads can be restructured, tags can be added; or really anything
    -can be done. If Heapkeeper's console interface does not support the kind
    -of modification that is to be performed, the user can either write a custom
    -command using Python, or modify directly the files that store the posts. HTML
    -*index pages* can be generated to display certain views of the heap. One of the
    -most simple indices is just showing all posts in a threaded structure. When the
    -user clicks on a post in an index in the browser, the browser will display the
    -HTML generated from the corresponding post.
    +Emails (that are e.g. sent to a mailing list) are downloaded by Heapkeeper.
    +After an email is downloaded, it is called a *post*. Posts are stored in
    +Heapkeeper's databases, which are called *heaps*. (One heap corresponds to one
    +mailing list.) A heap is stored as a set of text files; each file contains one
    +post. Posts can be viewed and changed either using Heapkeeper's web interface,
    +or using its console interface, or by directly reading/modifying the text files
    +in which the posts are stored. Posts are organized in threads, as emails in
    +mailing list archives usually are. Posts may have tags as well. When modifying
    +the heap, the content of the posts can be modified, threads can be
    +restructured, tags can be added; or really anything can be done. If
    +Heapkeeper's web interface or console interface does not support the kind of
    +view that is to be shown or the kind of modification that is to be performed,
    +the users have several options. They can either write a plugin for Heapkeeper's
    +web interface using Python and JavaScript; or they can write a custom console
    +command using Python; or they can just traverse/modify directly the files that
    +store the posts.

     Features
     --------

    -Currently Heapkeeper is a console tool with the following features:
    +Currently Heapkeeper has the following features:

    -* Storing posts in text files. These are human readable files with a format
    +* **Storing posts in text files**. These are human readable files with a format
       that is similar to the standard email file format (:rfc:`2822`).
    -* Downloading new emails via the IMAP SSL protocol.
    -* Console interface with commands to modify the heap. This is actually a
    -  Python shell with functions. Have a look at the console interface :ref:`here
    -  <screenshots_hkshell>`.
    -* Generating HTML pages from the heap. See examples of HTML pages :ref:`here
    -  <screenshots_pages>`.
    -
    -We plan to implement a web version of the tool in the future. It would download
    -new emails automatically, and it would have a web interface for modifying
    -the heap.
    +* **Downloading new emails** via the IMAP SSL protocol.
    +* **Console interface** with commands to modify the heap. This is actually a
    +  Python shell with some Heapkeeper-specific functions added. Have a look at
    +  the console interface :ref:`here <screenshots_hkshell>`.
    +* **Web interface** that allows viewing and editing the posts. Currently this
    +  is designed to be executed locally (by default it can be accessed as
    +  ``http://localhost:8080/`` in the browser), because we have not yet
    +  implemented authentication so anyone who accesses the page can do any
    +  modification to the posts. The web interface can show an index page with all
    +  posts, a thread page with only posts in a given thread, and it also has a
    +  search functionality where it shows the posts with the given search terms.
    +  All of these pages display the posts structured into threads. See
    +  screenshots of the web interface :ref:`here <screenshots_pages>`.
    +* **Generating static HTML pages**. Have a look at examples of generated pages
    +  here__.
    +
    +__ http://heapkeeper-heap.github.com
    +
    +We plan to improve the web interface in the future. It could be run on a server
    +as a web application: it would download new emails from the mailings lists
    +automatically, it would authenticate the users, and it would use a version
    +control system to version control the posts.

doc/status.rst:

     - Source code: Heapkeeper is in a usable form now, although there are many
       things which could be done to make it more convenient. The source code is
    -  constantly in a good shape, all commits in the repository since May should
    -  work fine.
    +  constantly in a good shape, all commits in the repository since May 2009
    +  should work fine.
     - Tests: we aim for 100% code coverage. We have currently 74% statement
       coverage (measured with ``coverage.py``). We have 3152 lines of test code
       for 4698 lines of normal code (not counting the issue tracker and the
    @@ -24,10 +24,12 @@ This page describes the status of the project's components.
       developer documentation, which describes the ideas and main concepts of
       Heapkeeper at a higher level, is quite incomplete, but fortunately
       up-to-date.
    +- The Heapkeeper web interface (hkweb) is not yet automatically tested nor
    +  documented.
     - Homepage: The non-documentation part of the homepage is fine for now. We
       could improve the web page design by making a custom theme though.
    -- Workflow: our workflow has gone stable with the release of 0.3. We
    -  strongly rely on Git in continuous integration of bugfixes and new
    -  features into mature code.
    +- Workflow: our workflow has been stable since the release of v0.4. We strongly
    +  rely on Git in continuous integration of bugfixes and new features into
    +  mature code. We plan to release a new Heapkeeper version every few month.

    -28th January, 2010
    +25th July, 2010
