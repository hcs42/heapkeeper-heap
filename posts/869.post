Author: Csaba Hoch
Subject: Creating sections in the new generator, problems
Tag: discussion
Message-Id: <4AF3C2E0.2040306@gmail.com>
Parent: <4ddb9e5b0911020052h1835a651p4ef18800c5975b84@mail.gmail.com>
Date: Fri, 06 Nov 2009 07:32:00 +0100

>> I implemented the old functionality of sections in
>> a Generator subclass in my hkrc. I really think we should provide more
>> support for this, as my code is quite complicated.
>
> If you show the code, I'll have a look at it in the evening (19-20
> o'clock) and see if we can make it smaller/simpler/more elegant.

I did not realize that you committed the code... I had a look at it
now, and it is not that bad :)

We could provide a few small function so that this code does not have
to be in the user's generator, see later.

But first another subject. You wrote this in `sections`:

     res = [ ("Nyitott javaslatok", ps_attention, True),
             ("Takarítani", ps_tidy, True),
             ("Tennivalók", ps_todo, True),
             ("Cipősdoboz", ps_singles, True),
             ("Heap", ps_heap, False),
             ("Programozás", ps_prog, False),
             ("C és C++", ps_ccpp, False),
             ("Python", ps_py, False),
             ("Egyéb", ps_all, False)]

And later you processes this data structure. I think it is more
flexible if you do not to create this data structure with all the
necessary data but call the section method (or a similar custom
method) on the different sections.

So `sections` (which would be a method of the generator) would contain
something like this:

    self.ps_attention = ps_attention
    self.ps_tidy = ps_tidy
    self.ps_todo = ps_todo
    self.ps_singles = ps_singles
    self.ps_heap = ps_heap
    self.ps_prog = ps_prog
    self.ps_ccpp = ps_ccpp
    self.ps_py = ps_py
    self.ps_all = ps_all

If you don't want it to be a method, it could return the same
information in a dictionary.

print_main_index_page would be something like this:

    return \
        (self.section(
            'nyitott javaslatok',
             'Nyitott javaslatok',
             self.ps_attention,
             is_flat=True),
         self.section(
            'takaritani',
            'Takarítani',
            self.ps_tidy,
            is_flat=True),
         self.section(
            'tennivalok',
            'Tennivalók',
            self.ps_todo,
            is_flat=True),
         self.section(
            'ciposdoboz',
            'Cipősdoboz',
            self.ps_singles,
            is_flat=True),
         self.section(
            'heap',
            'Heap',
            self.ps_heap,
            is_flat=False),
         self.section(
            'programozas',
            'Programozás',
            self.ps_prog,
            is_flat=False),
         self.section(
            'c_es_cpp',
            'C és C++',
            self.ps_ccpp,
            is_flat=False),
         self.section(
            'python',
            'Python',
            self.ps_py,
            is_flat=False),
         self.section(
            'egyeb',
            'Egyéb',
            self.ps_all,
            is_flat=False))

(It could be put into a list and a list comprehension, see later.)

It won't work in this form, because self.ps_* are post sets and not
post item lists. But you can write an own `section` method and use
that instead of `section`. I will call it `section_posts`. That could
do what you did in print_main_index_page:

    def section_posts(self, title, posts, is_flat):
        id = lowercase_and_escape(title) % e.g. 'nyitott_javaslatok'
        if is_flat:
            postitems = self.walk_flat_posts(posts)
        else:
            postitems = self.walk_exp_posts(posts)
        postitems = self.walk_postitems(postitems)
        content = self.print_postitems(postitems)
        return self.section(id, title, content, flat=is_flat)

    def walk_flat_posts(self, posts):
        # This should be included in hklib.PostDB or hkgen.Generator
        return [hklib.PostItem(pos='flat', post=post, level=0)
                for post in posts]

Then print_main_index_page would look like this:

    def print_main_index_page(self):
        return \
            (self.section_posts(
                 'Nyitott javaslatok',
                 self.ps_attention,
                 is_flat=True),
             self.section_posts(
                'Takarítani',
                self.ps_tidy,
                is_flat=True),
            ...

Of course you can put it into a list comprehension if you think that's
nicer and shorter (which is probably true :) ):

    def print_main_index_page(self):
        l = [('Nyitott javaslatok', self.ps_attention, True),
             ('Takarítani', self.ps_tidy, True),
             ...]

        return [self.section_posts(*t) for t in l]

(You could say that you created almost the exact same list in `res`,
which is true, but I think it is important that I created it within
the function that I use, so the format of the list is not the subject
of inter-function communication. My code does not change the
arguments/return value of a function, it is just a trick that allows
us to keep the code size smaller.)

Now section_posts looks a bit complicated, but:

1. It's not :)

2. If you want to do anything interesting, you have to modify that
   function. E.g. this is how you make the newer threads to be on the
   top of the page:

       def section_posts(self, title, posts, is_flat):
           id = lowercase_and_escape(title) % e.g. 'nyitott_javaslatok'

           if is_flat:
               postitems = self.walk_flat_posts(posts)
           else:
               postitems = self.walk_exp_posts(posts)
           postitems = self.walk_postitems(postitems)

           # new line:
           postitems = self.reverse_threads(postitems)

           content = self.print_postitems(postitems)
           return self.section(id, title, content, flat=is_flat)

3. You may want to use more than one. Maybe you want a
   section_posts_reverse for some sections, but you don't
   want to reverse the threads in others. The kind of code that sits
   inside this function is the primary point of customization (not
   counting customizing the sections and indices), so I want to be
   careful about including methods like section_posts to
   hkgen.Generator.

4. You may want to add parameters to it.

The latter two points may actually make the non-list-comprehension
form for print_main_index_page more desirable:

    def print_main_index_page(self):
        return \
            (self.section_posts(
                 'Nyitott javaslatok',
                 self.ps_attention,
                 is_flat=True,
                 super_important=self.ps_super_important),
             self.section_posts(
                'Takarítani',
                self.ps_tidy,
                is_flat=True,
                clean_limit=10),
             self.section_posts_supernice(
                'Takarítani',
                self.ps_tidy),
            ...
