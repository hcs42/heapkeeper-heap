Author: Csaba Hoch
Subject: Assess what we need for a usable product
Tag: prop
Tag: reviewed
Message-Id: <49FCD9D0.6050207@gmail.com>
Parent: <b29f917d0905020022x8644dcud2950d9a99dce1fa@mail.gmail.com>
Date: Sun, 03 May 2009 01:40:00 +0200

> I propose to start making a list of those additions and new features
> that we need in order to make Heapkeeper a product ready to be used by
> others.

OK. It could me an item-group in the todo list.

> My list of what we need:
> * a setup script

Really? What do you mean by a setup script? A script that for example
creates hk.cfg? I'm not a fan of the idea. I think it is easier to
edit a config file based on the tutorial than answering question. As
least I hate answering questions for a script, because:
- I don't see the full picture (e.g. all questions) when answering a
 particular one.
- It is usually impossible to go back if you later realize you give an
 incorrect answer before; you can only redo the whole thing.
- You have to became familiar with the config file itself anyway if
 you want to change a setting.

The only case when it is good to have a setup script is when the
generated config file is large, e.g. in the case of Sphinx. But it's
small in our case.

> * an up-to-date tutorial

I'm not sure about what priority should it have. I don't think you
would use it, but probably we won't catch any users without it.

> * a visitor-friendly web site...

I will upload a skeleton for the user documentation today. Afterwards
I will wait for your suggestion of what makes our web site
visitor-friendly (besides having a decent domain).

> ** ...which very strongly encourages interested visitors to get in
> (e-mail) contact with us

Very true. A mailing list...?

> * a public heap?

Also very true.

> == Do we need the interactive Web interface? ==
> 
> The first and probably most important question is: should we market
> Heapkeeper as a usable product in this phase, or only when we have at
> least some form of interactive Web interface.
> 
> I think having a Web interface is a nice way to go, but it's not
> everything. See for example MailMan [1]. Many projects use this
> mailing list manager, however it has only the kind of flat web
> interface Hk already supports (of course, since it has no way of
> altering history).

There is a difference: they do have a server.

> There is a counter-argument: if we open too soon to the world, some
> may fail to recognize what we're building here. With an impressive
> interactive Web interface, a higher percentage of our visitors would
> be interested.

True.

> Counter-counter-argument: "Release early, release often."

POSS says about "Development Status" [1]: 

  People always want to know how a project is doing. For new projects,
  they want to know the gap between the project's promise and current
  reality. For mature projects, they want to know how actively it is
  maintained, how often it puts out new releases, how responsive it is
  likely to be to bug reports, etc.

  To answer these questions, you should provide a development status
  page, listing the project's near-term goals and needs (for example,
  it might be looking for developers with a particular kind of
  expertise). The page can also give a history of past releases, with
  feature lists, so visitors can get an idea of how the project
  defines "progress" and how quickly it makes progress according to
  that definition.

  Don't be afraid of looking unready, and don't give in to the
  temptation to hype the development status. Everyone knows that
  software evolves by stages; there's no shame in saying "This is
  alpha software with known bugs. It runs, and works at least some of
  the time, but use at your own risk." Such language won't scare away
  the kinds of developers you need at that stage. As for users, one of
  the worst things a project can do is attract users before the
  software is ready for them. A reputation for instability or
  bugginess is very hard to shake, once acquired. Conservativism pays
  off in the long run; it's always better for the software to be more
  stable than the user expected than less, and pleasant surprises
  produce the best kind of word-of-mouth.

I'm not sure what to make out of this in our case. 

To answer to your "first and probably most important question": we
should just say the truth. The index pages now says this:

  Currently Heapkeeper is a console tool with the following features:

  [...]

  We plan to implement a web version of the tool in the future. It
  would download new emails automatically, and it would have a web
  interface for modifying the heap.

If you think it is not clear enough, you may suggest how to make these
statements even more explicit. But if a user reads these lines,
especially that Hk is a console tool, they will give Hk a try only if
they are hard-core users and developers. And they are whom can join
the development, as POSS says.

[1] http://producingoss.com/en/getting-started.html#development-status
