Author: Attila Nagy
Subject: Organizing the Heap: adding main page, more Wiki-like Heap
Tag: idea
Message-Id: <20101005180900.f5f14e6b.nagy.attila.1984@gmail.com>
Date: Tue, 5 Oct 2010 18:09:00 +0200

Heapkeeper has come a long way. The one feature we've been missing for
very long, and which I saw as the final milestone towards having a
real product, namely the dynamic Web interface, is essentially
complete.

We have many more ideas. We call the most ambitious ones "utopias".
This is not to say that they are impossible to achieve; it is rather
a play on the fact that we've wanted to have these features for a very
long time. Implementing most of these utopias would take a
considerable effort, of course.

I think it is time to slow down a bit, because we may have missed
something along the way. Heapkeeper is an application that is meant to
help those organizations who keep their much or all of their knowledge
in mailing lists. This is especially typical of open source projects.
When a newcomer asks a question on IRC, xe often gets the answer:
"This has already been asked on the mailing list, go search for it.
And if you do find the answer, would you please add it to our wiki?
Thanks."

We set out to blur the line between a mailing list and a wiki. We
wanted to make it possible to "clean up" information on the mailing
list so that it becomes usable as a reference. Mailing lists are ugly
mainly because threads are ugly. Topics arise and die, or gradually
transform into other topics. Heapkeeper provides a way to tidy up
these threads.

But it is only one thing to tidy up the threads. If someone comes to
our website to find proof that we can give what we promised, the order
of a wiki out of the chaos of a mailing list, what will xe find?
Chaos.

Heapkeeper has the tools we need to resolve that chaos. After all, we
can do everything that a mailing list does. And we can do everything
that a wiki does. It is the very "blurring of the line" that has been
slow to happen.

I think the index page has a major role in that. If a user arrives at
the main page of a wiki, in an ideal case xe sees a carefully managed
navigational entry point. The OpenTTD wiki would be a nice example
[1]. It is built to direct people with different interests to
different key pages, themselves being similar navigational aids, but
with more details in the given topic, and it's often these "second
level index pages" that point to the real content pages of the wiki.

Our index page couldn't be more different. It is a flat list of all
the posts in the heap. This is a regression. We used to have sections;
they helped reduce the problem, to a limited degree -- the user was
offered a flat list of several hundred posts instead of several
thousands, at least in the case of the UMS Heap.

What could we do? Watch the wording: heaps have an index page, wikis
have a main page. In books, the part called 'index' is a long list of
topics found in the book. A bit similar to our index [2]; but this is
almost always found at the end of books, suggesting that it should be
used when you check back after you've acquainted yourself with the
book. The first time you open the book, you find the table of
contents, which in composition is closer to the wiki notion of a main
page. I think this is what we need. Let's keep the index, but make it
accessible under a different name, e.g. http://myheap.org/index, and
add a human-edited main page accessible at http://myheap.org/.

The main page could be a synthetic [3] post linking to other synthetic
posts, these would be the "second level TOC" pages, and they could be
children of the 'main' post. We could add a feature so that if there
is a thread where the root post's ID is 'main', it will be presented
as the landing page instead of the index. 

This is how I image the main page and the second level pages of Hh.
The text is not meant to be complete, it is much rather just an
illustration of my idea:

    Main page <hh/main>

    Welcome to Heapkeeper Heap!

    This heap is the primary discussion medium for the development of
    Heapkeeper. As Heapkeeper is an open project, the Heap is open to
    everyone. At the same time, it serves as an example of how
    we imagine using Heapkeeper (but you are more than welcome to use
    it any way you like!).

    == Introduction ==

    [What is a "heap"?] -- an introduction to the ideas behind
    Heapkeeper

    [History of Heapkeeper] -- how did we get from our humble
    beginnings to our (still pretty humble) present state
    
    [Status and roadmap] -- what we already have, and what we want to
    have later

    == For users ==

    An administrator at your organization has set up a Heap for you.
    You want to know more about using it efficiently. Or maybe you are
    the person who is responsible for keeping the Heap in a good
    shape.

    [The console inteface: hkshell] -- "the engine room", so to say;
    if you have access, you can perform maintenance tasks quickly and
    efficiently (programming skills come handy)

    [The Web interface: hkweb] -- this is the main entrance where most
    of the work is done; "ordinary" users have access to this
    interface

    [Post Syntax] -- you don't have to follow this syntax in your
    posts, but if you do, the program can help you in various ways

    [Heap conventions] -- these conventions apply strictly to this
    heap only, but you may wish to check it out for "good practices"
    that you can use on your own heap!

    == For administrators ==

    You are a sysadmin who has been charged by a task that would best
    be handled by a mailing list, a wiki, or something in-between.
    Say, for example, that the users of your mailing list are
    brilliant people, but using a mailing program is not exactly their
    area of expertise, so what they post may occasionally need
    correction.

    [Setting up Heapkeeper] -- what you need to get started, and
    getting it done

    [Securing a Heapkeeper installation] -- not all mailing lists are
    world-readable, and so are not all heaps

    [Customizing Heapkeeper] -- this is where the fun starts:
    Heapkeeper is customizable on several levels, and it's hard to
    find an application you can't conveniently emulate!

    [Mass-manipulating Posts] -- the Boss asks something that seems
    impossible? Use the shell!

    == For developers == 

    You want to help us? Good. Here's the deal.

    [Development Workflow] -- what we do when developing Heapkeeper

    [Coding Conventions] -- to make sure your code fits in nicely

    [Testing] -- testing makes sure we get to keep what we have
    achieved

    [Community] -- that's us! :)

    [Tools of the trade: hk-dev-utils] -- a competent blacksmith can
    forge his own anvil

This contains the list of second-level pages. I imagine these pages
should be structured like this:
- an introduction, about 2-3 paragraphs
- links to synthetic posts about the topic
- links to natural posts about the topic

This way, the Heapkeeper Heap could be equally useful to outsiders and
insiders (us). We could not anymore be rightfully accused by not
fulfilling our promise of building order out of chaos.

I think this idea goes well with Csabi's earlier ideas of having
Wiki-like posts. What is new in this proposal is to have a Wiki-like
post that functions as a "main page".

I know this sounds like an insane amount of work, but I think that
it needs to be done if we hope to attract users and contributors. And
the software is here; the only feature that needs to be added is the
ability to add Wiki-like internal links to posts, but this is a
nontrivial task since it seems to break one of our key principles: the
one that dictates that the output copied and pasted yields the
original text.

Opinions?

[1] http://wiki.openttd.org/Main_Page
[2] But the exact equivalent to the books' index would be a list of
    keywords in Hk.
[3] I sometimes call a post that has been generated from an e-mail a
    "natural" post, and one that has been created on the Heap a
    "synthetic" post.
[4] heap://hh/4
