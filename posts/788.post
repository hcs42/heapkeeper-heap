Author: Attila Nagy
Subject: "Post.create_header: minor docstring improvement" (2009-08-27 b738ba6ffc)
Tag: reviewed
Message-Id: <b29f917d0910241448l24a76161k3bc6d37309626258@mail.gmail.com>
Date: Sat, 24 Oct 2009 23:48:54 +0200

You did a docstring update here:

     @staticmethod
     def create_header(d):
-        """Transforms the dict(str, [str]) returned by the parse_header
-        function to a str->(str | [str]) dictionary.
+        """Transforms the {str: [str])} returned by the parse_header
+        function to a {str: (str | [str])} dictionary.

I think neither the old, nor the new ones are the best. I had to read
the source to understand what it does.

Warning: the function `copy_one` is jedi code. I was reading it while
watching TV -- it took about two hours to begin to understand what it
does, then I had to do experiments in Python, because I couldn't
believe that it does what it should. But it does -- the function is
thoroughly tested, breaking it makes 70 tests fail.

I would rewrite its docstring like this (of course later complete with
proper arguments and returns sections):

"""Creates a dictionary of headers from the dictionary returned by the
`parse_header` function. This dictionary contains only keys of
existing header names, and if the source dictionary contains any other
keys, an exception will be raised. Some headers can have an
alternative name, which allows for parsing legacy post files.

Two kinds of headers exist, one is which can have multiple values.
The values for these keys are lists of string values both in the
received and the returned dictionaries. Such are 'Tag' and 'Flag'
headers.

For the other headers, only a single value is accepted. It is received
as a list with one string element in the source dictionary. If it has
more than one element, an exception is raised.

** Example: ** ::

    >>> Post.create_header({'Author':['Someone'],'Subject':['topic'],'Tag':['one','two']})
    {'Parent': '', 'Author': 'Someone', 'Flag': [], 'Tag': ['one',
'two'], 'Date': '', 'Message-Id': '', 'Subject': 'topic'}
"""

Do you think this would be more helpful than the original?
