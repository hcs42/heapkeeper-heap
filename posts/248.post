Author: Attila Nagy
Subject: Feature/setting system
Tag: prop
Tag: reviewed
Message-Id: <20090519093754.e1a0edd7.nagy.attila.1984@gmail.com>
Parent: <4ddb9e5b0905180423x270e995fp86e4de9143201b46@mail.gmail.com>
Date: Tue, 19 May 2009 09:37:54 +0200

> The current implementation calls the customization items "features."
> I propose to improve the "feature" system. The word "feature" could
> also be renamed to "setting".

I think "setting" is the best option. No pun intended [1].

> Or we could have a hierarchical structure of settings as has
> Thunderbird, so that it will be easier to understand the system of
> settings:

I like the idea. Such a system will surely pay off when we'll have to
provide controls for all of them on the Web UI.

> We have a shorter version of all features now (e.g. on('gi') instead
> of on('gen_indices')), but I'm not sure we need that. It would make
> the system more complicated, both to implement and use. I don't think
> we change the settings as much as we give commands, and usually
> setting the settings will go into hkrc anyway.

You are right, still, Vim has its own abbreviations, and it's a
Good Thing. But how about letting the user bring their own set of
abbreviations? And providing a simple set of abbrevs for the most common
settings in hkcustomlib?

<<<note I've written a lengthy argument on why I think it's important to
retain abbreviations for at least the most important options. I don't
want to include it here, since there was little new in it compared to
my earlier essay on the topic.>>>

To cut a long story short: I'm all for hierarchical settings, but they are
too long for anyone not too deeply involved with the project to remember,
and too tiresome to look up all the time. We have to have a usable set
of settings available in abbreviated form at the power user's fingertips.

>             len(modification_listener.touched_posts()) > 0): # at
>                                                              # least
>                                                              # one
>                                                              # post
>                                                              # changed

Sorry, can't help asking: are you serious about vertical comments? :)

> The setting function would look like this:

> A more compact version:

What you propose seems complicated at first. Still, I think the added
complexity will find its use when handling more complicated settings. So
I say OK.

> Usage:
>
>     >>> on('auto.gen_indices')

It is a good thing the old syntax is retained.

> The same scheme works for e.g. gen.date.timedelta and
> gen.subject.same_as_parent. For those settings, I guess we need a
> global hkshell.GeneratorOptions that is modified by the setting functions.

Yes, I've also been feeling the need for a global instance of
GeneratorOptions for a while now.

> === Deducing the name of the setting ==

> === Default values for settings ===

I like these ideas a lot.

> == Settings and options ==
>
> You may ask: what is the difference between settings and options?
> The shortest answer is that...

So, options are local, while settings are global and acts as event hooks. Am I
correct?

Generally I say OK to this proposal, but with the addition of my argument for
abbreviations.

[1] http://xkcd.com/559/
