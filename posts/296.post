Author: Csaba Hoch
Subject: Terminology: editor vs maintainer
Tag: reviewed
Message-Id: <4A1320BC.7060104@gmail.com>
Parent: <20090519230017.3ba762b3.nagy.attila.1984@gmail.com>
Date: Tue, 19 May 2009 23:12:28 +0200

> Don't really feel like... hope you can understand :)

Me neither; that's why I wrote ellipses at the end of the sentence.

> I think we will have to introduce some kind of lockout system anyway. My
> idea would be to lock the database for the time of creating a complete copy --
> a snapshot. Then, if it's complete, editing can resume, and the copy would be
> committed into the repository.

I don't really understand what is the use of the copy. Different posts
are edited by different people at the same time; what does "resume"
mean in this context? Deleting the work of everyone since the last
commit? (Read my last paragraph before answering.)

> This approach only makes sense if creating a full copy is much faster than
> committing into git right away, which I doubt.
>
> A more sophisticated approach would be to keep changes in memory for the time
> of a database freeze, and when the freeze is over (ie. the commit has
> completed), the changes would be transferred from memory to disk.

Are you talking about dealing with synchronization problems or
the implementation of the don't-commit-until-approved feature?
(Also: read my last paragraph before answering.)

I have a feeling that we are on the wrong track. I'm happy with the
git repository containing everything everybody ever posted -- just not
on GitHub. If someone is not happy with that, they are free to use
some other VCS instead of git, which allows them to remove certain
commits even from their history. Maybe we too should use something
else that fits our needs better.
