Author: Attila Nagy
Subject: Tidying up my hkrc
Tag: reviewed
Message-Id: <b29f917d0910212341y31d7baawb4269c7b3e26b6c0@mail.gmail.com>
Date: Thu, 22 Oct 2009 08:41:41 +0200

My hkrc is seriously lagging behind, so I'm tidying it up. I'll use
yours as a basis for this, which means that I'll also find things in
your hkrc.

== Editing ==

Are the `vim()`, `gvim()` and `edit_file()` functions obsolete? I
think they should be, now that the EDITOR variable is handled
correctly.

Also, what do you use `get_content()` for?

== Generating indices ==

It seems like you generate the indices twice (three times, actually,
but the third is for the generator). You have this:

def gen_indices(postdb):

    hkcustomlib.gen_indices(postdb)
    # Date options
    date_options = hkcustomlib.date_defopts()
    ...
    genopts.shorttags = True
    genopts.date_fun = date_fun

    # Generating my index
    hklib.Generator(postdb).gen_indices(genopts)

    # Generator the issue tracker index
    generator = issue_tracker.create_generator(genopts)
    generator.gen_indices(genopts)

So, first you do the default index generation, then the customized
one. Is this necessary?

There is a typo: "Generator the issue tracker index" should read
"Generating the ..."

== Collecting posts matching any of a set of tags ==

In `index0()`, where you collect posts based on tags, you wrote this:

    python_tags = ['python', 'Python']
    ps_python = ps_all.collect(has_tag(python_tags))

which uses:

    def has_tag(tags):
        def has_tag_fun(post):
            for tag in tags:
                if post.has_tag(tag):
                    return True
            return False
        return has_tag_fun

In my hkrc, this reads:

    ps_py = ps_all.collect.has_tag_from(('python', 'Python'))

You introduced your solution on 2009-03-21, I did mine on 2009-05-09.
We did basically the same thing (albeit yours has a brilliant
functional style ;)).

What do you think about this new implementation of `Post.has_tag`?

    def has_tag(self, tagset):
        assert(isinstance(tagset, str) or hasattr(tagset, '__iter__'))
        if isinstance(tagset, str):
            return tagset in self._header['Tag']
        for tag in tagset:
            if tag in self._header['Tag']:
                return True
        return False

Then we could have

    ps_python = ps_all.collect.has_tag(['python', 'Python'])

which is cleaner and more simple than our previous solutions.

== Dead code ==

Your `sections1()` seems to be dead code. (Also, why 1204?)

== Improvements ==

I reordered the functions, added docstrings and removed old code.

== Observation ==

The crusade to tidy up my hkrc resulted in criticizing yours...
