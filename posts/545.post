Author: Attila Nagy
Subject: Managing several heaps in Heapkeeper
Tag: prop
Tag: reviewed
Message-Id: <b29f917d0908281038n7a89f4ceh3bd9066edabd3e2@mail.gmail.com>
Parent: <4A918DBC.6040009@gmail.com>
Date: Fri, 28 Aug 2009 19:38:17 +0200

== Idea ==

What you propose is a very simple and powerful approach, and I like
it. However, it seems a step away from OO.

When I studied Java, a book I read had ideas on good OO design. One of
them was "if you can think about it as an entity, make it an object;
if you can think about it as a kind of entity, make it a class".

A "heap" seems to be a kind of entity, so it should have its
corresponding class. Of course, you can create a `Heap` class acting
as an adaptor to this scheme. This class would be useful as a natural
container for actions that affect a single heap, e.g. it could mirror
`PostDB`'s methods for retrieving threads, cycles, posts in a
`PostSet`... Does not seem very useful.

=== Terminology ===

> The name of the heap will be a string. The identifier of posts inside
> the heap would be similar to what we now call "heapid". I would rather
> call it "post name". "heapid" would confuse users, who would think
> that it identifies the heap. I would call the pair of heap name and
> post name "post id": that would be an unambiguous identifier of a
> post, even across heaps. If you know better name than "post name", I
> would be glad to hear it.

An example: for the post created from "<postdir>/ums/1234.post", the
"post name" could be "ums/1234". The part before the "/" would be
called "heapid", the part after it would be "postid". "post name"
could also be called "fullid" or "fullname" to emphasize its compound
nature.

== Storage ==

You decided to store posts of distinct heaps in different
subdirectories of the post directory. There is an alternative, namely,
storing all the post files in a single directory, naming them in a
"<heapid><separator><postid>.post" syntax, where <separator> is
commonly "_". This is what I would have done, simply for simplicity.

But your solution is better for these two reasons:
- it gives more liberty to heapids and postids, i.e. both can contain
  any characters permitted in filenames, including "_"; suppose one
  wants to use the subject as postid with spaces replaced with
  underscores
- some (all?) filesystems tend to manage several large directories
  better than one huge

== Example: moving a post ==

> This way moving the post will be easy:

Moving a single post will be easy, but if you move just one, its
connections to other posts will break. Probably it'll be necessary to
include a ready-made command for moving complete threads between
heaps.

The nice thing is that most of the "Parent:" header lines use "real"
"Message-Id"s from the original e-mails. This is nice because this
way, moved messages "find each other" automatically.

== Current heap ==

> The only problem is the inconvenience of users who want to handle one
> heap and does not want to specify the name of the heap all the time.

Yes it is. I imagine many users would have only one heap, why make
their lives harder? But I have another solution in mind. How about
having the empty string, '', as a special heapid? Post files for this
heap would go into the <postdir> directly, and when a string is used
instead of a tuple where a postname is required, this special heapid
could be assumed.

>    >>> p(('ums', 0))    # the first post of UMS
>    >>> p(('hh', 0))     # the first post of Hh
>
> We should have a current heap:
>
>    >>> select('ums')
>    >>> p(0)             # the first post of UMS
>    >>> select('hh')
>    >>> p(0)             # the first post of Hh

We could have a current heap if you'd like to. This could even be used
with the previous "unnamed heap" idea: after a `select('hh')` call, a
`p('0')` would be equivalent to `p(('ums, '0'))`, so the "default
heap" would be, by default, the unnamed heap, but a new default could
be selected by a `select()` call.

> The only thing I don't know whether it should be better to have a
> current heap in hkshell or in PostDB. It seems to me that having it in
> hkshell would be architecturally cleaner, but having it in PostDB
> would be a bit easier. Maybe I'll try to implement it in hkshell, and
> if it turns out to be inconvenient, I'll go with having it in PostDB.
> Opinions?

I'd implement it in hkshell. hklib should only see the tuples.
