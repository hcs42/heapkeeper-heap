Author: Csaba Hoch
Subject: SHA1 as post id
Tag: discussion
Message-Id: <4A9A2CF9.3090604@gmail.com>
Date: Sun, 30 Aug 2009 09:40:41 +0200

We shall discuss the possibilities, advantages and disadvantages of
having SHA1 id as post id. The topic was brought up in another thread
[1].

The problem is that git deals with unmodifiable (immutable) objects.
Blobs, trees and commits are all immutable, that's why they can have
SHA1 ids.

Posts are not immutable, so they cannot have SHA1 ids. We could make
our model similar to git and have immutable posts. It would mean that
every tiny modification in a post would result in a different post.

Although it sound nice in theory, it would be harder to use Hk in
practice if we used that approach. Would not you be happier if you
could change commits of the past in git without creating new branches?
Of course git has very good reasons for not allowing that. But we
don't. It is sooo good that I can just edit a post file with an editor
(either from inside Hk with the e() command or from outside Hk), not
having to worry about changing its id. If we used SHA1 as post id, we
could not change the post from outside Hk, because then the SHA1 id of
the post would change, and the references to this post in other files
would have to be changed, as well. (Later in this email I will show a
possible (but not very nice) solution for this problem.) The e()
command could do that automatically, but users would not do it
manually. Now the only thing that is hard to do from outside hkshell
for the same reason is to change the id of a post. Moving posts
between heaps will require changing the post id, that's why it will be
able to be done conveniently only from within Hk. On the other hand,
ironically, if we use SHA1 ids, that only one operation that will be
easier is to move a post between heaps... But everything else (e.g.
modifying its content by adding tags, changing the subject etc.) will
require creating a new file and removing the old one. So for example
it would be much harder to track our post database with git, because
it would contain moved and slightly changed files all the time. (Let's
say we delete all signature from all posts. Imagine a diff in the
current system, and in the SHA1-system, where _all_ post will be in a
totally differently named file, with a slightly different content.) Or
what about referencing posts in emails that are not yet downloaded? In
my email I would reference post bc34a5f, which is on the heap, but two
days later, due to a modification, it would become 591bf61...

I have an idea that would mitigate some problems. The problem of
referencing posts in not yet downloaded emails and the problem of
editing post files from outside hkshell could be solved by storing all
post ids for a post that it once had. In other words, every post would
contain a list of SHA1 ids it used to have at some point in the past.
These could be wiped out periodically.

It is also practical in our current system that posts have
easy-to-remember ids. It is neat to write:

    >>> e(1234)

Although our current system has the "prefix problem" of several
contributors: we will have "csabi_x" and "attis_x" posts, which is a
bit ugly. Using SHA1 ids would solve this problem.

== Conclusion ==

It seems to me that using SHA1 post ids would be a considerable amount
of work, and we would not gain too much in Hk's usability. It would
solve a few things (moving posts, prefix problem), but we would have
new challenges (modifying post content, storing old SHA1 ids, tracking
the post database with git).

Do you know other merits of the idea of using SHA1 ids?

[1] post://2567
