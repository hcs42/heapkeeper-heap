Author: Csaba Hoch
Subject: Body parsing - the what - examples
Tag: post syntax
Tag: prop
Message-Id: <4A125AFB.1060406@gmail.com>
Parent: <20090518011928.99444ebf.nagy.attila.1984@gmail.com>
Date: Tue, 19 May 2009 09:08:43 +0200

This page should be a wiki page on the heap. (See this thread [1]
about wiki pages on the heap.) Thus I've posted a todo about every
typo. I agree with everything I haven't commented.

> The first parser module takes the plaintext body of the message, and
> turn it

<<<todo: turn -> turns>>>

> into a sequence of plaintext segments.

> Initial segmenting:
>
>    Plaintext [Hello everybody.]
>    Boundary  []
>    Plaintext [Look what I found.]
>    Boundary  []
>    Plaintext [http://www.url.com]
>    Boundary  []
>    Plaintext [For more details, see http://www.example.com too.]
>
> After URL interpretation:
>
>    Plaintext [Hello everybody.]
>    Boundary  []
>    Plaintext [Look what I found.]
>    Boundary  []
>    URL       [http://www.url.com]
>    Boundary  []
>    Plaintext [For more details, see]

<<<todo: "see]" -> "see ]", right? I guess it will not matter in the
later stages, but still.>>>

> === Special protocols ===
>
> Some protocol specifiers, like "http", "https", "ftp" and "file",
> are passed on to the HTML output unchanged. Others' have meanings

<<<todo Is the apostrophe at the "Others'" an error?>>>

== Place of meta text ==

> === Link appearance ===
>
> [...]
>
> Plaintext:
>
>    Please have a look at <<<link http://www.example.com this site>>>.

Previously we agreed on allowing the <<< and >>> of the meta text only
in the beginning of the lines [2]. Have you changed your mind about
this?

== Cites ==

> Cites are a way to include details, explanation or external sources
> in the post without distracting the reader's attention
> unnecessarily. In the flowing text, cites appear as decimal numbers
> in brackets, while at the end of the post they are expanded
> (usually, but the expansions can be anywhere).
>
> Plaintext body:
>
>    This site [1] says that it's not important [2].
>
>    [1] http://www.boring.com
>    [2] At least that's what they say...
>
> After initial segmenting:
>
>    Plaintext [This site [1] says that it's not important. [2]]
>    Boundary  []
>    Plaintext [[1] http://www.boring.com\n[2] At least that's what they say...]
>
> After processing cites:
>
>    Paragraph [This site ]
>    Citehead  [1]
>    Paragraph [says that it's not important. ]
>    Citehead  [2]
>    CitebodyURL   [1 http://www.boring.com]
>    CitebodyText  [2 At least that's what they say...]
>
> HTML output:
>
>    <p>
>        This site
>        <a href="http://www.boring.com" class="external">
>            [1]
>        </a>
>        says that it's not important.
>        <a href="#cite-2" class="internal">
>            [2]
>        </a>
>    <p>
>    <p class="citebody" id="cite-1">
>        [1] http://www.boring.com
>    </p>
>    <p class="citebody" id="cite-2">
>        [2] At least that's what they say...
>    </p>
>
> The different classes for the link enable the CSS to visually
> distinguish links that'll move away from the page from links that'll
> only jump inside the page.

I would also like to write emails like this:

   Our website [1] should be improved according to them [2].

   [1] Currently http://hste.uw.hu/heapkeeper/index.html
   [2] http://www.boring.org, section "Heapkeeper is boring"

== Automatic action on metas (a.k.a. !-metas) ==

> * <<<!deltext>>> - delete this meta
> ** used to give throwaway hints to the

<<<todo I think this sentence is unfinished.>>>

== Quotes ==

> Finding quotes is important for two reasons. Firstly, collecting quoted
> parts of the body into specific HTML elements allows for styling them
> via CSS, which may be more readily recognizable than quote introduction
> characters (>) alone.
>
> Secondly, the program can use the thread structure and quotation depth
> together to find the original author of the quoted lines. Quote
> introduction lines could be parsed and used in determining the authors
> or could simply be thrown away.

A third reason is to process quotes differently: e.g. we don't want to
interpret cite heads in quotes.

> After quote expansion, pass 2:
>
>    Quote     [
>
>        Quote   [
>
>            Quote [We should use Ratpoison.]
>
>            Boundary    []
>
>            Plaintext [What is ratpoison?]
>            ]
>
>        Boundary    []
>
>        Plaintext   [Ratpoison is a minimalistic window manager.]
>        ]
>
>    Boundary  []

Are you sure this recursive structure is the best one?

The following structure seems to be better for me:

    Quote,3   [We should use Ratpoison.]
    Quote,2   [What is ratpoison?]
    Quote,1   [Ratpoison is a minimalistic window manager.]
    Boundary  []
    Plaintext [Why do you think we all should use it?]

I think from the parser's point of view the two approaches need equal
amount of work. From the HTML presentation's point of view, yours is
probably easier. From the point of view of all the other processors,
though, I think my approach is simpler.

>    <p class="note">
>        Watch the wording, I must have been high.]
>    </p>

<<<todo Remove the ] from the last but one line.>>>

== Unknown metas ==

> I think unknown metas should be displayed specially, as they require
> attention from an editor.

I agree.

== Authors and signatures ==

> If a line matches entirely with an author's known and stored nickname,
> it should be ignored.

Why?

> But, regardless of whether a signature line is present, a signature
> should be added in the HTML rendering

<<<todo Period is missing>>>

OK. I don't see the use of this, but if you like it, go ahead.

== Wiki-like headers ==

> The idea of MediaWiki-like syntax for headers has been proposed (and
> this post happens to follow this syntax :)). This feature is enabled
> only if the <<<wiki>>> meta is present.
>
> Plaintext:
>
>    <<<wiki>>>
>    == Bacteria ==
>
>    Bacteria are the most simple cellular organisms.
>
> Initial segmenting:
>
>    Plaintext [<<<wiki>>>\n== Bacteria ==]

I don't know how do you think the parser will work, but I would think
it never creates that text. It is highly illogical to me that our main
text object is the TeX-like paragraph, and everything else is parsed
from those. Consider this:

    <<<note

    This is a long note.

    Eh.>>>

In my opinion we can create the following text objects in first go:
- quote blocks
- meta text blocks
- text blocks
- raw blocks (lines that start with whitespace and would be in a text
  block otherwise)

The first go takes into account only the first few characters of each
line.

We can create these in the second go:
- quote paragraphs
- text paragraphs

In case of the wiki syntax, another go would happen between the first
and the second ones: the one that creates the headers.

== TODO ==

> There are probably many other things that the body parser should do. I
> think none of these have a consequence that will change the
> architecture of body parsing. If you know of any, please post it here.

I just posted one :)

=== Itemization ===

And here is another one. I write itemizations very frequently. Like
these:

    Nice animals:
    - cat
    - dog
    - fish

    We could do:
    a. this
    b. that

    If we choose (a), we have to:
    1. start
    2. stop

We have to find a way to render these. (I haven't found yet.)

Csabi

[1] heap://hh/4
[2] heap://ums/1176
