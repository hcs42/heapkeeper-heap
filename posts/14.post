Author: Csaba Hoch
Subject: HeapException, % and tuples, branches (2009-03-17 9c37c29405)
Tag: commit
Message-Id: <49C17246.1080106@gmail.com>
Date: Wed, 18 Mar 2009 23:14:30 +0100

This commit is definitely a nice solution:

             except:
    -            raise HeapException, \
    -                  'Error parsing message file "%s"' %  f.name
    +            raise (HeapException,
    +                  'Error parsing message file "%s"'
    +                    % getattr(f, name, ""))
 
But I have two comments.

== % and tuples ==

When we use the % operator, we should always use the tuple syntax.
The reason is described in the "Coding conventions" file (in the
"options_refactoring" branch):

    - When you format a string with the % operator and you have only one
      parameter to format, use the tuple syntax.

    Yes:
        "%s" % (x,)

    No:
        "%s" % x
    No:
        "%s" % (x)

    The reason is that printing a tuple may lead to surprises. To reduce
    the possibility of a bug, always follow this convention, even if you
    are sure that the parameter after the % operator is not a tuple.

        >>> x = (1,2)
        >>> "%s" % (x,)
        '(1, 2)'
        >>> "%s" % x
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: not all arguments converted during string formatting
        >>> "%s" % (x)
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: not all arguments converted during string formatting


== Branches ==

Probably we should work only in the options_refactoring branch now,
otherwise we may get funny errors, especially when we don't write a
test case for some code.

For example the HeapException class has been moved to the heaplib
module. But when the master branch will be merged into the
options_refactoring branch, of course git won't realize that, and the
merged code will be the code as taken from the master branch:

    raise (HeapException,
          'Error parsing message file "%s"'
            % getattr(f, name, ""))

While this should contain heaplib.HeapException instead of just
HeapException.

I know only two solution, and neither is perfect:
a. Let's merge the master and options_refactoring branches ASAP
b. Let's write tests that cover all code (even exception handling code)

I think (a) is more feasible in the short run.
