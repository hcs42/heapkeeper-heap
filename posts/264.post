Author: Attila Nagy
Subject: Storing our post files on GitHub
Tag: idea
Message-Id: <20090519193344.59ba5876.nagy.attila.1984@gmail.com>
Parent: <4A12E71F.4090100@gmail.com>
Date: Tue, 19 May 2009 19:33:44 +0200

<<<note I think I was high when I wrote the parent of this post. No,
really. So, sorry for all the misunderstandings.>>>

>> I think just do it. It is not a mailing list for its own sake, it's
>> a mailing list that exists purely to create documentation for the
>> project hosted at GitHub, hence, the mailing list archive is purely
>> documentation.
>
> I thought we would communicate with our users and other developers via HH.

No, you've misunderstood me, though I can't really blame you for it. Of
course a mailing list exists to provide a means of communication among
developers and between developers and the users. But this communication
consists of either an interchange and discussion of plans regarding
the development, or questions and answers regarding the use of the
project. The result of both of these communication forms qualify as
documentation: they are either plans or howtos.

>> HH contains practically no personal information, so it's safe to
>> publish. Of course, we'll have to double-check before a push to
>> ensure there's really no sensitive information within. If it's
>> difficult to remove nasty revisions from Wikipedia's database, with
>> GitHub, it's even more painful.
>
> I understand that you wrote this to prove that we should not have any
> concerns, but as I read it, and started to have some...

Again, misunderstanding. I wasn't advocating putting HH on GitHub, I was
voicing my concerns.

> I thought that
> when using Hkweb, the central repository should always have the
> up-to-date version of the heap -- that is, it should contain the posts
> sent 3 minutes ago. Even without the Hkweb, we could have a server
> that pushes new posts to the repository in real time. That's how
> mailing lists work -- if you post something, it is in the web archive
> a few minutes later.
>
> What you describe is not that. You say that every post has to go to
> GitHub via a heap maintainer.

You definitely have a point there. But how about retaining the Git repository
behind Hkweb? How about providing a feature for editors to commit a known good
state to the repository?

On the Hungarian Wikipedia, a new revision patrolling system has been
instantiated. This is pretty similar to how I fancy using a Git repo as a
backend for the Web interface.

This discussion showed me how important it will be to clarify the data model
prior to moving on to the Hkweb stage.

> To conclude:
>
> The advantages of using GitHub (with human repository updates):
> - We would not have to pull from each other's PC.
> - Anybody could download HH any play around with it.
> - Anybody could make an HH-clone, make modifications and we could pull
>   from them.
>
> Main disadvantage:
> - If someone goes there, it will remain there forever.

<<<todo Something?>>>

> I lean towards accepting GitHub as a temporary solution. With noting
> that we will revisit the problem when we have Hkweb.

I'm not that sure we'd have any need for HH until we reach at least some
maturity of Hkweb, and not so sure if we'll have it even after that.
Pessimistic, I know. But I'm not into marketing, and don't know how to make a
brilliant new project widely known. But, I think you have an excellent book on
that :) What does it say?
