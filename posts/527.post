Author: Csaba Hoch
Subject: Workflow with separate repositories
Message-Id: <4A8BA03F.1060308@gmail.com>
Parent: <b29f917d0908180440m3dd5ea73kc49574d0fa4d030c@mail.gmail.com>
Date: Wed, 19 Aug 2009 08:48:31 +0200

== How Csabi evaluates others' commits ==

>> What do you think, which branch should I pull your commit into, when
>> I think it's "perfect"? It seems that master should be used for this.
>> Do you agree?
> 
> I imagine a three-stage approach:
> 
> You first pull my commit into a temporary branch on heapkeeper_. You
> look what it does, comment on it, then I correct my code in further
> commits. You pull those, comment back etc. until it's ready for the
> next step.

No, I don't pull those commits into heapkeeper_. I don't even pull
them into a local branch. I just fetch them and check them out as
remotes/attis/<branch>.

== Number of repositories ==

> Then, you integrate it into heapkeeper_/master, the base commit and
> all improvement commits squished together, with the same commit
> message that'll appear in the stable "heapkeeper" tree. This means
> that I'll get back this commit in my heapkeeper_/master's "origin", so
> I'll pull it back, and I'll base my further ideas upon it.
>
> Then, if the commit "seems stable", ie. it has endured a given trial
> time, and no new bugs have surfaced, the commit can be transferred to
> the `heapkeeper` repository, which is the stable.

I don't like this approach: I don't want to have two heapkeeper
repositories ("heapkeeper" and "heapkeeper_") for hcs42. We should
have one repository for everyone. For a few weeks it had been called
heapkeeper_, later it will be called heapkeeper.

But we can use a very similar model to what you describe: integrate
the commits into heapkeeper/master-candidate, and later transfer it to
heapkeeper/master. This is basically equivalent to what you describe.
I am against it though -- see later.

== Policy question: what to do with bugs and when to rewrite history ==

You also raise a very important policy question: what to do when we
find a bug in a published commit (i.e. a remote branch)? I think
almost all projects would commit a fix, while you seem to prefer
rewriting the history. I can see the reason behind your preference,
but I'm not sure that's what we should do.

Two thoughts to consider:
- History rewrite modifies the SHA1 ids of commits, so we have to
  modify the commit ids in all posts in which we talked about them.
  That's kinda fine, that's why we have Heapkeeper -- but still...
  Do we want to have a workflow that needs an extensively modifiable
  mailing list? I accept rewriting very recent commits (basically
  "commits under construction"), but I don't want to do this with
  older commits (whether they are in my master or not).
- It will be harder for others to join if bug fixes are not commits
  but history-rewrites.

The way of working I imagined isn't too conventional either, I think,
but still... Or maybe we will make up something better than either of
our ideas.

The main thing is that in your proposal, the unmodifiable branch is
special, and the modifiable ones are the default. In my proposal, it
is in the other way around. Which makes it a bit closer to normal
conventions.

I thought having two kinds of _remote_ branches: normal branches and
private branches. Normal branches are like branches in any normal git
project: anyone can pull them, because their history is very unlikely
to be rewritten. Private branches would be marked with a leading
underscore (just like private data attributes (=data members) in
Python :) ), and a private branch means "use it to your own
responsibility, because its history may get changed, or its commits
may even be deleted". If I push a commit into a private branch, I do
it only to share it with some people so that they can try it out, tell
their opinion about it, and later probably it will go into a public
commit, maybe in a modified version. So a private branch is similar to
a local branch in the sense that it is not "published", it is not to
be used by the world; it was pushed only because of technical reasons:
the easiest way to show a branch to other people is to push it to your
github/heapkeeper repository.

In this model, you could have made a _fastdownload branch, send me the
pull request, and after my suggestions, modify it. After you rewriting
it to be "perfect", I would pull it to my master. If we wanted to keep
it a separate branch from master for some reason, we both could have
made a "fastdownload" branch, which would be fed from _fastdownload.
When fastdownload is ready, it could be merged into master. The point
in the latter case is that anyone could use the fastdownload branch,
because it is public, it's history is not to be rewritten.

Using this model, my bug policy would be the following: if you find a
bug in a local or private remote branch, rewrite the history; if you
find a bug in a public remote branch, fix it in a new commit.

So comparing this policy to Oliver Steele's commit policies [1], we
would have one more data store between "local" and "remote", the
"private remote". The policy bar under "private remote" would say
something like "worth showing it to someone" or "want to get
reviewed".

== The "real master" proposal ==

According to your proposal, we would have another data store, the
"real master". You described it as a separate repo (heapkeeper as
opposed to heapkeeper_); I described as a separate branch (master),
where I use the master-candidate as the normal master. That would be a
new data store in Steele's model between "remote repository" and
"distribution". (Distribution is having a release.)

But do we really need this? Isn't it OK if I pull your change in
_fastdownload into my normal master when I think its perfect? Isn't it
OK to commit a bug fix if it turns out _later_ that it is buggy? Isn't
is OK to make it nicer _later_, in a separate commit? Who would be
happier if we had a separate, special master branch?

Users who use only the distributed releases certainly don't care. They
just want good code, and the "real master" approach won't help it, as
I will describe in a few paragraphs.

Users who use our master branch use it so that they always have the
latest and greatest stuff, and if something breaks for them, they can
report it just after we made the commits. It's no good if we commit
something into our heapkeeper/master-candidate (or heapkeeper_/master)
now and put it into heapkeeeper/master only in a few weeks time; the
people who use our master will experience the problems only then, and
we would be happier to have a bug report _just after_ we published the
commits and thought that it works for both of us, not _a few weeks
after_ we made the commits.

Developers who want to follow our work don't want to follow the "real
master" even if we have that; they want to follow what is going on
_right now_, not what happened a few weeks ago. So they would not and
should not use a "real master". For new developers, it would be a bit
confusing that they see nothing happening on the master, while every
kind of stuff is happening elsewhere. (In an other repo, if we accept
your proposal! And in other branches, if we accept mine.) If they see
branches with underscore, maybe they can kinda guess what it is (based
on their Python knowledge :) ). Although I'm not stating my approach
is easier for newcomers to comprehend. Just wanted to say something
about the happiness of newcomers, too :)

I would not be happier, because when do I decide to put something into
the "real master"? Should it be automatically two weeks, or 10
commits, or what should be the criterion? I definitely won't check
them again whether I find a problem in them. And what happens if it
turns out there is a problem in something that we want to merge into
the "real master"? I would do a new commit, I would not rewrite the
history. I (or somebody) would also have to do the administrative
overhead of dealing with the "real master".

What would happen with the releases? When we make a release in the
master candidate, should we wait with putting it into master? It
sounds silly to wait: we wait because we are not sure it's fine, but
no real user can test it, because they use the "real master". If we
put it into the real master at once, which seems more logical, than
there is no point in having a separate "real master".

I understand that you want to keep the history tidy, but I think the
"real master" approach hurts more than it helps. At least two people
will see every commit before it goes to our master branches, which
will help avoid the two main problems we had with the previous history
(bad names/email addresses and bad descriptions for commits that mark
a Hk release). We did not have any other major problem with it -- and
if you consider that we started the project in the autumn, we just
started using git, and we did not review each other's commits before
they went into a "public branch", then you see we don't have to worry
about keeping the Hk repository tidy. We will try to do more rebase
and less merges in our local repos -- but it that has nothing to do
with a "real master". If commits go to a public branch like
"master-candidate" or "bodyparsing", we should not use rebase on them
anyway. I will discuss the use of rebase later in my email, so please
answer there if you have a different opinion.

So I wouldn't go into the hassle of having a "real master".

But I don't know about your happiness. Would you be happier having a
separate "real master"? If so, why? You don't have to answer if you
accept not having a "real master" :)

== Stable releases ==

> This approach is modeled after Debian's stable/testing/unstable
> workflow, which is secure and stable, but also slow.

"Feature freeze" is the right tool for supporting stability in the
released products, not a "real master". It means that we stop
committing new features into the master branch for a while, and commit
only bug fixes, based on the users' and our own experiences. (We can
of course set up a branch for the normal development with new
features.) The main thing is that users should be able to try the
testing version out without a hassle; we should not keep it in a real
repository. The duration of the feature freeze period may vary: in the
project I work, it is 1 week, in the Debian world, it is one or two
months [2].

I am all for having a feature freeze period.

> We'd use it not for stability, but rather to keep our "official"
> history clean. But new features should appear in the "public" repo
> with an acceptable turnaround time.

"Acceptable turnaround time" is very different for different people.

== Merge policy ==

When we discovered "git rebase", we were quite happy that we can get
rid of the motorways. It is true, it can help us, but don't get too
obsessed: don't use it for public branches. The rule of thumb is the
following: use rebase for local branches, and use merge for remote
branches. If we introduce the notion of private remote branches, we
may do rebase there. But otherwise we should keep ourselves from
rebasing published commits. If your motivation for a "real master" is
that than we are allowed to rebase other public branches, I would
advise you to forget it.

== My commits that should be reviewed ==

>> I think I will make another branch, which you can review before I
>> merge them into master. Shall it be named "experimental", "exp",
>> "slave", "hcs", or something else?
> 
> Maybe "review". What do you think?

OK, good idea! Or if we accept the idea of private repos, it could be
_review or _master.

[1] http://osteele.com/archives/2008/05/commit-policies
[2] http://tldp.org/HOWTO/Software-Proj-Mgmt-HOWTO/developers.html#FREEZING
    They call "feature freeze" what I am talking about, and they mean
    a different thing under the term "code freeze".

[note This post took me two and a half hours to write.]
