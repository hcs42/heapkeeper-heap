Author: Csaba Hoch
Subject: __repr__ function (2009-04-19 f9b1451718)
Tag: commit
Message-Id: <49F0BD26.2090804@gmail.com>
Date: Thu, 23 Apr 2009 21:10:30 +0200

Diff:

    @@ -521,6 +521,9 @@ class Post(object):
             else:
                 return False
     
    +    def __repr__(self):
    +        return self._heapid
    +
         # Misc
     
         def remove_google_stuff(self):

From the Python documentation of the Python Data Model [1]:

    object.__repr__(self)

        Called by the repr() built-in function and by string
        conversions (reverse quotes) to compute the “official” string
        representation of an object. If at all possible, this should
        look like a valid Python expression that could be used to
        recreate an object with the same value (given an appropriate
        environment). If this is not possible, a string of the form
        <...some useful description...> should be returned. The return
        value must be a string object. If a class defines __repr__()
        but not __str__(), then __repr__() is also used when an
        “informal” string representation of instances of that class is
        required.

        This is typically used for debugging, so it is important that
        the representation is information-rich and unambiguous.

    object.__str__(self)

        Called by the str() built-in function and by the print
        statement to compute the “informal” string representation of
        an object. This differs from __repr__() in that it does not
        have to be a valid Python expression: a more convenient or
        concise representation may be used instead. The return value
        must be a string object.

For example:

    >>> repr(lambda x: None)
    '<function <lambda> at 0xb7d62374>'

I think this would be a nice repr function:

    def __repr__(self):
        return '<post with heapid %s>' % (self._heapid,)

I see that it would be more convenient for us if it was shorter,
but this verbosity is very helpful for our future users and not that
inconvenient for us.

Csabi

[1] http://docs.python.org/reference/datamodel.html
